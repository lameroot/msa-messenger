// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// SendNotification provides a mock function with given fields: IDFrom, IDTo, SentTime, ShortMessage
func (_m *NotificationService) SendNotification(IDFrom uuid.UUID, IDTo uuid.UUID, SentTime int64, ShortMessage string) (string, error) {
	ret := _m.Called(IDFrom, IDTo, SentTime, ShortMessage)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, string) (string, error)); ok {
		return rf(IDFrom, IDTo, SentTime, ShortMessage)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, string) string); ok {
		r0 = rf(IDFrom, IDTo, SentTime, ShortMessage)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, int64, string) error); ok {
		r1 = rf(IDFrom, IDTo, SentTime, ShortMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type NotificationService_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - IDFrom uuid.UUID
//   - IDTo uuid.UUID
//   - SentTime int64
//   - ShortMessage string
func (_e *NotificationService_Expecter) SendNotification(IDFrom interface{}, IDTo interface{}, SentTime interface{}, ShortMessage interface{}) *NotificationService_SendNotification_Call {
	return &NotificationService_SendNotification_Call{Call: _e.mock.On("SendNotification", IDFrom, IDTo, SentTime, ShortMessage)}
}

func (_c *NotificationService_SendNotification_Call) Run(run func(IDFrom uuid.UUID, IDTo uuid.UUID, SentTime int64, ShortMessage string)) *NotificationService_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *NotificationService_SendNotification_Call) Return(_a0 string, _a1 error) *NotificationService_SendNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_SendNotification_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, int64, string) (string, error)) *NotificationService_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
