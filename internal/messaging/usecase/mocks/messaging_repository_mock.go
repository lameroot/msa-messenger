// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	messaging_models "github.com/lameroot/msa-messenger/internal/messaging/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PersistentRepository is an autogenerated mock type for the PersistentRepository type
type PersistentRepository struct {
	mock.Mock
}

type PersistentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PersistentRepository) EXPECT() *PersistentRepository_Expecter {
	return &PersistentRepository_Expecter{mock: &_m.Mock}
}

// GetMessages provides a mock function with given fields: IDUser, LastCount
func (_m *PersistentRepository) GetMessages(IDUser uuid.UUID, LastCount int32) ([]messaging_models.Message, error) {
	ret := _m.Called(IDUser, LastCount)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []messaging_models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int32) ([]messaging_models.Message, error)); ok {
		return rf(IDUser, LastCount)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, int32) []messaging_models.Message); ok {
		r0 = rf(IDUser, LastCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messaging_models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, int32) error); ok {
		r1 = rf(IDUser, LastCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistentRepository_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type PersistentRepository_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - LastCount int32
func (_e *PersistentRepository_Expecter) GetMessages(IDUser interface{}, LastCount interface{}) *PersistentRepository_GetMessages_Call {
	return &PersistentRepository_GetMessages_Call{Call: _e.mock.On("GetMessages", IDUser, LastCount)}
}

func (_c *PersistentRepository_GetMessages_Call) Run(run func(IDUser uuid.UUID, LastCount int32)) *PersistentRepository_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(int32))
	})
	return _c
}

func (_c *PersistentRepository_GetMessages_Call) Return(_a0 []messaging_models.Message, _a1 error) *PersistentRepository_GetMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersistentRepository_GetMessages_Call) RunAndReturn(run func(uuid.UUID, int32) ([]messaging_models.Message, error)) *PersistentRepository_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMessage provides a mock function with given fields: IDUser, messageRequest
func (_m *PersistentRepository) SaveMessage(IDUser uuid.UUID, messageRequest messaging_models.SendMessageRequest) error {
	ret := _m.Called(IDUser, messageRequest)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, messaging_models.SendMessageRequest) error); ok {
		r0 = rf(IDUser, messageRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistentRepository_SaveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMessage'
type PersistentRepository_SaveMessage_Call struct {
	*mock.Call
}

// SaveMessage is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - messageRequest messaging_models.SendMessageRequest
func (_e *PersistentRepository_Expecter) SaveMessage(IDUser interface{}, messageRequest interface{}) *PersistentRepository_SaveMessage_Call {
	return &PersistentRepository_SaveMessage_Call{Call: _e.mock.On("SaveMessage", IDUser, messageRequest)}
}

func (_c *PersistentRepository_SaveMessage_Call) Run(run func(IDUser uuid.UUID, messageRequest messaging_models.SendMessageRequest)) *PersistentRepository_SaveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(messaging_models.SendMessageRequest))
	})
	return _c
}

func (_c *PersistentRepository_SaveMessage_Call) Return(_a0 error) *PersistentRepository_SaveMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PersistentRepository_SaveMessage_Call) RunAndReturn(run func(uuid.UUID, messaging_models.SendMessageRequest) error) *PersistentRepository_SaveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewPersistentRepository creates a new instance of PersistentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersistentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersistentRepository {
	mock := &PersistentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
