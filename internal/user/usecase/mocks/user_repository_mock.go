// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	user_models "github.com/lameroot/msa-messenger/internal/user/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PersistentRepository is an autogenerated mock type for the PersistentRepository type
type PersistentRepository struct {
	mock.Mock
}

type PersistentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PersistentRepository) EXPECT() *PersistentRepository_Expecter {
	return &PersistentRepository_Expecter{mock: &_m.Mock}
}

// AcceptFriend provides a mock function with given fields: IDUser, IDFriend
func (_m *PersistentRepository) AcceptFriend(IDUser uuid.UUID, IDFriend uuid.UUID) error {
	ret := _m.Called(IDUser, IDFriend)

	if len(ret) == 0 {
		panic("no return value specified for AcceptFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(IDUser, IDFriend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistentRepository_AcceptFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptFriend'
type PersistentRepository_AcceptFriend_Call struct {
	*mock.Call
}

// AcceptFriend is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - IDFriend uuid.UUID
func (_e *PersistentRepository_Expecter) AcceptFriend(IDUser interface{}, IDFriend interface{}) *PersistentRepository_AcceptFriend_Call {
	return &PersistentRepository_AcceptFriend_Call{Call: _e.mock.On("AcceptFriend", IDUser, IDFriend)}
}

func (_c *PersistentRepository_AcceptFriend_Call) Run(run func(IDUser uuid.UUID, IDFriend uuid.UUID)) *PersistentRepository_AcceptFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PersistentRepository_AcceptFriend_Call) Return(_a0 error) *PersistentRepository_AcceptFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PersistentRepository_AcceptFriend_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *PersistentRepository_AcceptFriend_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToFriends provides a mock function with given fields: IDUser, IDFriend
func (_m *PersistentRepository) AddUserToFriends(IDUser uuid.UUID, IDFriend uuid.UUID) (user_models.FriendshipStatus, error) {
	ret := _m.Called(IDUser, IDFriend)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToFriends")
	}

	var r0 user_models.FriendshipStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (user_models.FriendshipStatus, error)); ok {
		return rf(IDUser, IDFriend)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) user_models.FriendshipStatus); ok {
		r0 = rf(IDUser, IDFriend)
	} else {
		r0 = ret.Get(0).(user_models.FriendshipStatus)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(IDUser, IDFriend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistentRepository_AddUserToFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToFriends'
type PersistentRepository_AddUserToFriends_Call struct {
	*mock.Call
}

// AddUserToFriends is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - IDFriend uuid.UUID
func (_e *PersistentRepository_Expecter) AddUserToFriends(IDUser interface{}, IDFriend interface{}) *PersistentRepository_AddUserToFriends_Call {
	return &PersistentRepository_AddUserToFriends_Call{Call: _e.mock.On("AddUserToFriends", IDUser, IDFriend)}
}

func (_c *PersistentRepository_AddUserToFriends_Call) Run(run func(IDUser uuid.UUID, IDFriend uuid.UUID)) *PersistentRepository_AddUserToFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PersistentRepository_AddUserToFriends_Call) Return(_a0 user_models.FriendshipStatus, _a1 error) *PersistentRepository_AddUserToFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersistentRepository_AddUserToFriends_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (user_models.FriendshipStatus, error)) *PersistentRepository_AddUserToFriends_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *PersistentRepository) Close() {
	_m.Called()
}

// PersistentRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type PersistentRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *PersistentRepository_Expecter) Close() *PersistentRepository_Close_Call {
	return &PersistentRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *PersistentRepository_Close_Call) Run(run func()) *PersistentRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PersistentRepository_Close_Call) Return() *PersistentRepository_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *PersistentRepository_Close_Call) RunAndReturn(run func()) *PersistentRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserFromFriends provides a mock function with given fields: IDUser, IDFriend
func (_m *PersistentRepository) DeleteUserFromFriends(IDUser uuid.UUID, IDFriend uuid.UUID) error {
	ret := _m.Called(IDUser, IDFriend)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserFromFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(IDUser, IDFriend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistentRepository_DeleteUserFromFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFromFriends'
type PersistentRepository_DeleteUserFromFriends_Call struct {
	*mock.Call
}

// DeleteUserFromFriends is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - IDFriend uuid.UUID
func (_e *PersistentRepository_Expecter) DeleteUserFromFriends(IDUser interface{}, IDFriend interface{}) *PersistentRepository_DeleteUserFromFriends_Call {
	return &PersistentRepository_DeleteUserFromFriends_Call{Call: _e.mock.On("DeleteUserFromFriends", IDUser, IDFriend)}
}

func (_c *PersistentRepository_DeleteUserFromFriends_Call) Run(run func(IDUser uuid.UUID, IDFriend uuid.UUID)) *PersistentRepository_DeleteUserFromFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PersistentRepository_DeleteUserFromFriends_Call) Return(_a0 error) *PersistentRepository_DeleteUserFromFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PersistentRepository_DeleteUserFromFriends_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *PersistentRepository_DeleteUserFromFriends_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriends provides a mock function with given fields: IDUser
func (_m *PersistentRepository) GetFriends(IDUser uuid.UUID) ([]user_models.Friend, error) {
	ret := _m.Called(IDUser)

	if len(ret) == 0 {
		panic("no return value specified for GetFriends")
	}

	var r0 []user_models.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]user_models.Friend, error)); ok {
		return rf(IDUser)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []user_models.Friend); ok {
		r0 = rf(IDUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_models.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(IDUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistentRepository_GetFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriends'
type PersistentRepository_GetFriends_Call struct {
	*mock.Call
}

// GetFriends is a helper method to define mock.On call
//   - IDUser uuid.UUID
func (_e *PersistentRepository_Expecter) GetFriends(IDUser interface{}) *PersistentRepository_GetFriends_Call {
	return &PersistentRepository_GetFriends_Call{Call: _e.mock.On("GetFriends", IDUser)}
}

func (_c *PersistentRepository_GetFriends_Call) Run(run func(IDUser uuid.UUID)) *PersistentRepository_GetFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *PersistentRepository_GetFriends_Call) Return(_a0 []user_models.Friend, _a1 error) *PersistentRepository_GetFriends_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersistentRepository_GetFriends_Call) RunAndReturn(run func(uuid.UUID) ([]user_models.Friend, error)) *PersistentRepository_GetFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RejectFriend provides a mock function with given fields: IDUser, IDFriend
func (_m *PersistentRepository) RejectFriend(IDUser uuid.UUID, IDFriend uuid.UUID) error {
	ret := _m.Called(IDUser, IDFriend)

	if len(ret) == 0 {
		panic("no return value specified for RejectFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(IDUser, IDFriend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistentRepository_RejectFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectFriend'
type PersistentRepository_RejectFriend_Call struct {
	*mock.Call
}

// RejectFriend is a helper method to define mock.On call
//   - IDUser uuid.UUID
//   - IDFriend uuid.UUID
func (_e *PersistentRepository_Expecter) RejectFriend(IDUser interface{}, IDFriend interface{}) *PersistentRepository_RejectFriend_Call {
	return &PersistentRepository_RejectFriend_Call{Call: _e.mock.On("RejectFriend", IDUser, IDFriend)}
}

func (_c *PersistentRepository_RejectFriend_Call) Run(run func(IDUser uuid.UUID, IDFriend uuid.UUID)) *PersistentRepository_RejectFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PersistentRepository_RejectFriend_Call) Return(_a0 error) *PersistentRepository_RejectFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PersistentRepository_RejectFriend_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *PersistentRepository_RejectFriend_Call {
	_c.Call.Return(run)
	return _c
}

// NewPersistentRepository creates a new instance of PersistentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersistentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersistentRepository {
	mock := &PersistentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
